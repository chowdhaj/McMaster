tutorial.1.template.filled.txt

==========
QUESTION 1
==========
Consider three different processors P1, P2, and P3 executing the same instruction set. P1 has a 3 GHz clock rate and a CPI of 1.5. P2 has a 2.5 GHz clock rate and a CPI of 1.0. P3 has a 4.0 GHz clock rate and has a CPI of 2.2.

a. Which processor has the highest performance expressed in instructions per second?

b. If the processors each execute a program in 10 seconds, find the number of cycles and the number of instructions.

c. We are trying to reduce the execution time by 30%, but this leads to an increase of 20% in the CPI. What clock rate should we have to get this time reduction?

------
PART A
------

To calculate which processor has the highest performance, we need to divide the CPI by Clock Rate. Clock Rate measures "speed", and CPI is about efficiency vis a vis clock cycles per instruction.

Performance of P1 = (3.0 x 10^9) / 1.5 = 2.0 x 10^9
Performance of P2 = (2.5 x 10^9) / 1.0 = 2.5 x 10^9
Performance of P3 = (4.0 x 10^9) / 2.2 = 1.8 x 10^9

Note: The answer provided is: Instructions Per Second

------
PART B
------

To calculate the number of cycles executed by a processor, we need to multiply the time (10 s) with the clock rate (in MHz) of the processor

Number Of Cycles For P1 = (3.0 × 10^9) × 10 = (30 × 10^9) = (3.0 × 10^10)
Number Of Cycles For P2 = (2.5 × 10^9) × 10 = (25 × 10^9) = (2.5 × 10^10)
Number Of Cycles For P3 = (4.0 × 10^9) × 10 = (40 × 10^9) = (4.0 × 10^10)


To calculate the number of instructions executed by a processor, we need to divide the number of cycles executed by the CPI (clocks per instruction). Note: CPI is about efficiency.

Number Of Instructions For P1 = ((30 × 10^9) ÷ 1.5) = (20 × 10^9) = (2.0 × 10^10)
Number Of Instructions For P2 = ((25 × 10^9) ÷ 1.0) = (25 × 10^9) = (2.5 × 10^10)
Number Of Instructions For P3 = ((40 × 10^9) ÷ 2.2) = (18.18 × 10^9) = (1.818 × 10^10)

------
PART C
------

We know that the old execution time is 10 seconds. A reduction of 30% means that the new execution time needs to be 7 seconds, because 10 * 0.7 = 7. This new execution time will be used for all processors.

Increasing the CPI by 1.2 means that: CPI_new = CPI_old x 1.2

P1_CPI_new = 1.5 x 1.2 = 1.80
P2_CPI_new = 1.0 x 1.2 = 1.20
P3_CPI_new = 2.2 x 1.2 = 2.64

Now, we can use the following formula to calculate the Clock Rate:
f = ((Number of Instructions) × CPI) ÷ (Execution Time)

So, we get:

f(P1) = (20 × 10^9 × 1.8) ÷ 7 = 5142857142.85 MHz = 5.14GHz
f(P2) = (25 × 10^9 × 1.2) ÷ 7 = 4285714285.71 MHz = 4.28GHz
f(P3) = (18.18 × 10^9 × 2.6) ÷ 7 = 6752571428.57 MHz) = 6.75GHz

==========
QUESTION 2
==========
Compilers can have a profound impact on the performance of an application. Assume that for a program, compiler A results in a dynamic instruction count of 1.0E9 and has an execution time of 1.1 s, while compiler B results in a dynamic instruction count of 1.2E9 and an execution time of 1.5 s.

a. Find the average CPI for each program given that the processor has a clock cycle time of 1 ns.

b. Assume the compiled programs run on two different processors. If the execution times on the two processors are the same, how much faster is the clock rate of the processor running compiler A’s code versus the clock rate of the processor running compiler B’s code?

c. A new compiler is developed that uses only 6.0E8 instructions and has an average CPI of 1.1. What is the speedup of using this new compiler versus using compiler A or B on the original processor?

------
PART A
------

First of all, we need to calculate the Clock Rate of the processor. We can do so with the following formula: Clock Cycle Time = 1 / Clock Rate

Rearranging for Clock Rate gives us:
Clock Rate = 1 / Clock Cycle Time

We know that Clock Cycle Time is: 1 ns

Clock Rate = 1 / (1 ns)
Clock Rate = 1.0 GHz
Clock Rate = (1 x 10^9) MHz

Now, we can calculate the CPI of each compiler via:
CPI = (ExecutionTime x Clock Rate) / Number of Instructions

First, we will do Compiler_A:
CPI (Compiler_A) = (1.1 x (1.0 x 10^9)) / (1.0 x 10^9)
CPI (Compiler_A) = 1.1

Now, we will do Compiler_B:
CPI (Compiler_B) = (1.5 x (1.0 x 10^9)) / (1.2 x 10^9)
CPI (Compiler_B) = 1.25

------
PART B
------

To calculate the speed-up via clock rate, we will use the following formula:
(Clock Rate) = (CPI × (Number Of Instructions)) ÷ (Execution Time)

In essence, we are trying to find the following:
(Clock Rate Of P1 Running Compiler_A) / (Clock Rate Of P2 Running Compiler_B)

After substituting the formula from above, we get:

(CPI × (Number Of Instructions)) ÷ (Execution Time)   # P1:Compiler_A
---------------------------------------------------      (Dividing)
(CPI × (Number Of Instructions)) ÷ (Execution Time)   # P2:Compiler_B

Since the execution times are the same, we can cancel it to get:

   (CPI × (Number Of Instructions))
=  --------------------------------
   (CPI × (Number Of Instructions))

After substituting values, we get:

  (1.1 × (1 x 10^9))
= ---------------------
  (1.25 × (1.2 x 10^9))


  (1.1 x 10^9)
= ------------
  (1.5 x 10^9)

= (1.1 / 1.5)

= 0.7333333
(If we take the inverse, we get: 1.363636)

In conclusion, the clock rate of the processor running CompilerB is 1.36x faster than the other processor

------
PART C
------

We are given the instruction count, CPI, and we know that the clock rate is the same because all compilers are running on the original processor. Hence, we need to find the speed-up via execution time

We will use the following formula:
(Execution Time) = (CPI × (Number Of Instructions)) ÷ (Clock Rate)

Since the clock rate is the same, we can cancel it out:
(Execution Time) = (CPI × (Number Of Instructions))

First, we will calculate the speed up for Compiler_NEW vs Compiler_A

(CPI × (Number Of Instructions))     # P1:Compiler_NEW
--------------------------------        (Dividing)
(CPI × (Number Of Instructions))     # P1:Compiler_A


  (1.1 × (6.0 x 10^8))
= --------------------
  (1.1 × (1.0 x 10^9))


  (6.6 x 10^8)
= ------------
  (1.1 x 10^9)


= 0.6

= 0.6 ^ (-1) = 1.666666666

This means that Compiler_NEW ~1.67 times faster than Compiler_A

Now, we will calculate the speed up for Compiler_NEW VS. Compiler_B:

(CPI × (Number Of Instructions))     # P1:Compiler_NEW
--------------------------------        (Dividing)
(CPI × (Number Of Instructions))     # P1:Compiler_B


  (1.1 × (6.0 x 10^8))
= --------------------
  (1.25 × (1.2 x 10^9))


  (6.6 x 10^8)
= ------------
  (1.5 x 10^9)


= 0.44

= 0.44 ^ (-1) = 2.2727272727

This means that Compiler_NEW is ~2.27 times faster than Compiler_B

==========
QUESTION 3
==========
The results of the SPEC CPU2006 bzip2 benchmark running on an AMD Barcelona has an instruction count of 2.389E12, an execution time of 750 s, and a reference time of 9650 s.

1.12.1 Find the CPI if the clock cycle time is 0.333 ns.

1.12.2 Find the SPEC ratio.

1.12.3 Find the increase in CPU time if the number of instructions of the benchmark is increased by 10% without affecting the CPI.

1.12.4 Find the increase in CPU time if the number of instructions of the benchmark is increased by 10% and the CPI is increased by 5%.

1.12.5 Find the change in the SPEC ratio for this change.

1.12.6 Suppose that we are developing a new version of the AMD Barcelona processor with a 4 GHz clock rate. We have added some additional instructions to the instruction set in such a way that the number of instructions has been reduced by 15%. The execution time is reduced to 700 s and the new SPECratio is 13.7. Find the new CPI.

1.12.7 This CPI value is larger than obtained in 1.12.1 as the clock rate was increased from 3 GHz to 4 GHz. Determine whether the increase in the CPI is similar to that of the clock rate. If they are dissimilar, why?

1.12.8 By how much has the CPU time been reduced?

1.12.9 For a second benchmark, libquantum, assume an execution time of 960 s, CPI of 1.61, and clock rate of 3 GHz. If the execution time is reduced by an additional 10% without affecting the CPI and with a clock rate of 4 GHz, determine the number of instructions.

1.12.10 Determine the clock rate required to give a further 10% reduction in CPU time while maintaining the number of instructions and with the CPI unchanged.

------
1.12.1
------

First we will calculate the clock rate:
Clock Rate = (1 ÷ Cycle Time)
Clock Rate = (1 ÷ 0.333333333)
Clock Rate = 3 GHz
Clock Rate = 3 x 10^9 MHz

Now, we can calculate the CPI:
CPI = Clock Rate × (CPU Time ÷ Instruction Count)
CPI = (3 x 10^9) × (750 ÷ (2.389 x 10^12))
CPI = 0.941816659

Therefore, the CPI for bzip2, if the clock cycle time is 0.333 ns is: 0.941816659

------
1.12.2
------

The SPEC ratio can be calculated via the following formula:
SPEC_ratio = (Reference Time / Execution Time)
SPEC_ratio = (9650 / 750)
SPEC_ratio = 12.866666666

The SPEC ratio for bzip2 is (roughly): ~12.86

------
1.12.3
------

Since the only change is the numberOfInstructions, we can conclude that the change in CPU time is equal to the change in numberOfInstructions. Since numberOfInstructions increases by 10%, then CPU time will also increase by 10%.

------
1.12.4
------

To calculate CPU time, we will use the following formula:
(CPU Time) = ((CPI × Instruction Count) ÷ Clock Rate)

We know that:
- Instruction count is increased by 10%
- CPI is increased by 5%

The new equation is:
(CPU Time) = (((1.05 * CPI) × (1.1 * Instruction Count)) ÷ Clock Rate)

Therefore, CPU time increases by a factor of:
1.05 x 1.1 = 1.155

------
1.12.5
------

The formula for the SPEC_ratio is:
SPEC_ratio = (ReferenceTime / CPUtime)

SPEC_ratio(after) / SPEC_ratio(before) = CPU_time (before) / CPU_time (after) = 1 / 1.155 = 0.86

100 - 86 = 14%

Thus, we can conclude that the SPEC_ratio decreased by 14%

------
1.12.6
------

Clock Rate: 4 GHz = 4 x 10^9 MHz
CPU time: 700 s
Instruction count: (0.85 × 2.389 × 10^12) = (2.03065 × 10^12)

We can use the following formula to calculate CPI:
CPI = ((Clock Rate × CPU Time) ÷ Instruction Count)
CPI = (((4 x 10^9) × 700) ÷ (2.03065 × 10^12))
CPI = 1.378868835

Therefore, the CPI of the new version of the AMD Barcelona processor is: 1.378868835

------
1.12.7
------

Clock Rate Ratio:
4 GHz / 3 GHz = 1.33

CPI Ratio:
1.37 / 0.94 = 1.45

We can see that the 2 ratios are different because, although the number of instructions has been reduced by 15%, the CPU time has been reduced by a lower percentage.

------
1.12.8
------

The old CPU time is: 750 s
The new CPU time is: 700 s

Dividing old by new gives:
Ratio = 700 / 750
Ratio = 0.9333333

100 - 93.333333333 = 6.67

We can conclude that the CPU time reduction is 6.7%

------
1.12.9
------

We know that:
CPU Time = 0.9 x 960 = 864
Clock Rate = 4 GHz = 4.0 x 10^9 MHz
CPI = 1.61

We will use the following formula to calculate InstructionCount:

(InstructionCount) = ((CPU_Time × ClockRate) ÷ CPI)
(InstructionCount) = ((864 × (4.0 x 10^9)) ÷ 1.61)
(InstructionCount) = 2.1465 × 10^12

-------
1.12.10
-------

(Clock Rate) = ((Instruction Count ÷ CPU Time) × CPI)
(Clock Rate) = ((2.1465 × 10^12 ÷ (0.9 × 960)) × 1.61)
(Clock Rate) = (3.999843 × 10^9) MHz
(Clock Rate) ~ (4.0 GHz)

Therefore, we need a clock rate of about 4 GHz to achieve a 10% reduction in CPU time (or execution time), without affecting the number of instructions or CPI
